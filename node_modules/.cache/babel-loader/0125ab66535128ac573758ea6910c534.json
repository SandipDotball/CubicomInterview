{"ast":null,"code":"import { combine, withState, withHandlers, withProps, onDidMount, onWillUnmount, onWillReceiveProps, isolate, integrate, onDidUpdate } from \"reassemble\";\nimport runInFrame from \"../utils/runInFrame\";\nimport pick from \"../utils/pick\";\nimport { ActionID, StateID, actionPropKeys } from \"../reducer\";\n\nvar pickTransitionState = function (state) {\n  return pick(state, \"style\", \"className\", \"inTransition\", \"id\");\n};\n\nexport var withTransitionState = function (reduce) {\n  return combine(isolate(withProps(function (props) {\n    return {\n      actionProps: pick.apply(void 0, [props].concat(actionPropKeys))\n    };\n  }), withState(\"transitionState\", \"setTransitionState\", function (_a) {\n    var actionProps = _a.actionProps;\n    return pickTransitionState(reduce(StateID.EntryPoint, {\n      kind: ActionID.New,\n      props: actionProps\n    }).state);\n  }), withHandlers(function (initialProps) {\n    var stateID = reduce(StateID.EntryPoint, {\n      kind: ActionID.New,\n      props: initialProps\n    }).state.id;\n    var cancelPending = null;\n    var pendingCallback;\n\n    var cancelPendingIfExistent = function () {\n      if (cancelPending) {\n        cancelPending();\n        cancelPending = null;\n      }\n    };\n\n    return {\n      cancelPendingIfExistent: function () {\n        return cancelPendingIfExistent;\n      },\n      runPending: function () {\n        return function () {\n          var callback = pendingCallback;\n          pendingCallback = null;\n\n          if (callback) {\n            callback();\n          }\n        };\n      },\n      dispatch: function (_a) {\n        var actionProps = _a.actionProps,\n            onTransitionComplete = _a.onTransitionComplete,\n            setTransitionState = _a.setTransitionState;\n\n        var run = function (actionID) {\n          var result = reduce(stateID, {\n            kind: actionID,\n            props: actionProps\n          });\n\n          if (!result) {\n            return;\n          }\n\n          if (result.completed && onTransitionComplete) {\n            onTransitionComplete();\n          }\n\n          var state = result.state,\n              pending = result.pending;\n          stateID = state.id;\n          cancelPendingIfExistent();\n\n          if (pending) {\n            pendingCallback = function () {\n              cancelPending = runInFrame(1, function () {\n                return run(pending);\n              });\n            };\n          }\n\n          setTransitionState(pickTransitionState(state));\n        };\n\n        return run;\n      }\n    };\n  }), withHandlers({\n    onTransitionBegin: function (_a) {\n      var dispatch = _a.dispatch;\n      return function () {\n        return dispatch(ActionID.TransitionStart);\n      };\n    },\n    onTransitionComplete: function (_a) {\n      var dispatch = _a.dispatch;\n      return function () {\n        return dispatch(ActionID.TransitionComplete);\n      };\n    },\n    timeout: function (_a) {\n      var dispatch = _a.dispatch;\n      return function () {\n        return dispatch(ActionID.Timeout);\n      };\n    }\n  }), onDidMount(function (_a) {\n    var dispatch = _a.dispatch;\n    dispatch(ActionID.Mount);\n  }), onWillReceiveProps(function (_a, _b) {\n    var prevActive = _a.active;\n    var nextActive = _b.active,\n        dispatch = _b.dispatch;\n\n    if (prevActive === nextActive) {\n      return;\n    }\n\n    dispatch(ActionID.TransitionTrigger);\n  }), onDidUpdate(function (_a) {\n    var runPending = _a.runPending;\n    runPending();\n  }), onWillUnmount(function (_a) {\n    var cancelPendingIfExistent = _a.cancelPendingIfExistent;\n    cancelPendingIfExistent();\n  }), integrate(\"timeout\", \"transitionState\", \"onTransitionBegin\", \"onTransitionComplete\")));\n};","map":{"version":3,"sources":["composables/withTransitionState.tsx"],"names":[],"mappings":"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","sourcesContent":["import { CSSProperties } from \"react\";\nimport {\n  combine, withState, withHandlers, withProps,\n  onDidMount, onWillUnmount, onWillReceiveProps,\n  isolate, integrate, StateUpdater, onDidUpdate,\n} from \"reassemble\";\n\nimport { CSSTransitionProps, CSSTransitionInnerProps } from \"../csstransition\";\nimport runInFrame from \"../utils/runInFrame\";\nimport pick from \"../utils/pick\";\nimport { ActionID, StateID, Reducer, actionPropKeys, ActionPropKeys } from \"../reducer\";\n\nexport type TransitionState = {\n  id?: StateID,\n  style?: CSSProperties,\n  className?: string,\n  inTransition?: boolean,\n};\n\nexport type WithTransitionStateProps = {\n  transitionState?: TransitionState,\n  timeout?: () => void,\n};\n\ntype PropsOut =\n  WithTransitionStateProps & {\n    actionProps?: {[P in ActionPropKeys]?: CSSTransitionProps[P]},\n    cancelPendingIfExistent?: () => void,\n    dispatch?: (actionID: ActionID) => void,\n    runPending?: () => void,\n    setTransitionState?: StateUpdater<TransitionState>,\n    onTransitionBegin?: CSSTransitionInnerProps[\"onTransitionBegin\"],\n    onTransitionComplete?: CSSTransitionInnerProps[\"onTransitionComplete\"],\n  };\n\ntype PropsUnion = CSSTransitionProps & PropsOut;\n\nconst pickTransitionState = (state: any) => pick(state, \"style\", \"className\", \"inTransition\", \"id\");\n\nexport const withTransitionState = (reduce: Reducer) => combine(\n  isolate(\n    withProps<PropsUnion, PropsOut>(\n      (props) => ({ actionProps: pick(props, ...actionPropKeys) }),\n    ),\n    withState<PropsUnion, keyof PropsOut, TransitionState>(\n      \"transitionState\", \"setTransitionState\",\n      ({actionProps}) =>\n        pickTransitionState(\n          reduce(StateID.EntryPoint, { kind: ActionID.New, props: actionProps }).state,\n        ),\n    ),\n    withHandlers<PropsUnion, PropsOut>(\n      (initialProps) => {\n        let stateID = reduce(StateID.EntryPoint, { kind: ActionID.New, props: initialProps }).state.id;\n        let cancelPending: () => void = null;\n        let pendingCallback: () => void;\n        const cancelPendingIfExistent = () => {\n          if (cancelPending) {\n            cancelPending();\n            cancelPending = null;\n          }\n        };\n        return {\n          cancelPendingIfExistent: () => cancelPendingIfExistent,\n          runPending: () => () => {\n            const callback = pendingCallback;\n            pendingCallback = null;\n            if (callback) {\n              callback();\n            }\n          },\n          dispatch: ({actionProps, onTransitionComplete, setTransitionState}) => {\n            const run = (actionID: ActionID) => {\n              const result = reduce(stateID, { kind: actionID, props: actionProps });\n              if (!result) { return; }\n              if (result.completed && onTransitionComplete) {\n                onTransitionComplete();\n              }\n              const {state, pending} = result;\n              stateID = state.id;\n              cancelPendingIfExistent();\n              if (pending) {\n                pendingCallback = () => {\n                  cancelPending = runInFrame(1, () => run(pending));\n                };\n              }\n              setTransitionState(pickTransitionState(state));\n            };\n            return run;\n          },\n        };\n      }),\n    withHandlers<PropsUnion, PropsOut>({\n      onTransitionBegin: ({dispatch}) => () => dispatch(ActionID.TransitionStart),\n      onTransitionComplete: ({dispatch}) => () => dispatch(ActionID.TransitionComplete),\n      timeout: ({dispatch}) => () => dispatch(ActionID.Timeout),\n    }),\n    onDidMount<PropsUnion>(\n      ({dispatch}) => {\n        dispatch(ActionID.Mount);\n      }),\n    onWillReceiveProps<PropsUnion>(\n      ({active: prevActive}, {active: nextActive, dispatch}) => {\n        if (prevActive === nextActive) { return; }\n        dispatch(ActionID.TransitionTrigger);\n      }),\n    onDidUpdate<PropsUnion>(\n      ({runPending}) => {\n        runPending();\n      }),\n    onWillUnmount<PropsUnion>(\n      ({cancelPendingIfExistent}) => {\n        cancelPendingIfExistent();\n      }),\n    integrate<keyof PropsUnion>(\n      \"timeout\", \"transitionState\", \"onTransitionBegin\", \"onTransitionComplete\",\n    ),\n  ),\n);\n"]},"metadata":{},"sourceType":"module"}