{"ast":null,"code":"var __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n  }\n\n  return t;\n};\n\nimport mapProps from \"./mapProps\";\nimport omit from \"./utils/omit\";\nimport pick from \"./utils/pick\";\nimport mapKeys from \"./utils/mapKeys\";\nimport getKeysAndSymbols from \"./utils/getKeysAndSymbols\";\nexport function renameProps(nameMap) {\n  var keysAndSymbols = getKeysAndSymbols(nameMap);\n  return mapProps(function (props) {\n    return __assign({}, omit.apply(void 0, [props].concat(keysAndSymbols)), mapKeys(pick.apply(void 0, [props].concat(keysAndSymbols)), function (oldName) {\n      return nameMap[oldName];\n    }));\n  });\n}\nexport default renameProps;","map":{"version":3,"sources":["renameProps.ts"],"names":[],"mappings":";;;;;;;;;;AACA,OAAO,QAAP,MAAqB,YAArB;AACA,OAAO,IAAP,MAAiB,cAAjB;AACA,OAAO,IAAP,MAAiB,cAAjB;AACA,OAAO,OAAP,MAAoB,iBAApB;AACA,OAAO,iBAAP,MAA8B,2BAA9B;AAUA,OAAM,SAAA,WAAA,CACJ,OADI,EACgC;AAEpC,MAAM,cAAc,GAAG,iBAAiB,CAAC,OAAD,CAAxC;AACA,SAAO,QAAQ,CAAC,UAAC,KAAD,EAAM;AAAK,WAAA,QAAA,CAAA,EAAA,EACtB,IAAI,CAAA,KAAJ,CAAI,KAAA,CAAJ,EAAI,CAAC,KAAD,EAAM,MAAN,CAAW,cAAX,CAAJ,CADsB,EAEtB,OAAO,CACR,IAAI,CAAA,KAAJ,CAAI,KAAA,CAAJ,EAAI,CAAC,KAAD,EAAM,MAAN,CAAW,cAAX,CAAJ,CADQ,EAER,UAAC,OAAD,EAAQ;AAAK,aAAA,OAAO,CAAP,OAAO,CAAP;AAJU,KAEf,CAFe,CAAA;AAMzB,GANa,CAAf;AAOD;AAED,eAAe,WAAf","sourcesContent":["import { Composable } from \"./blueprint\";\nimport mapProps from \"./mapProps\";\nimport omit from \"./utils/omit\";\nimport pick from \"./utils/pick\";\nimport mapKeys from \"./utils/mapKeys\";\nimport getKeysAndSymbols from \"./utils/getKeysAndSymbols\";\n\nexport function renameProps<TKeysIn extends string, TKeysOut extends string>(\n  nameMap: {[P in TKeysIn]?: TKeysOut},\n): Composable;\n\nexport function renameProps(\n  nameMap: { [key: string]: string | symbol },\n): Composable;\n\nexport function renameProps<TKeysIn extends string, TKeysOut extends string>(\n  nameMap: {[P in TKeysIn]?: TKeysOut},\n) {\n  const keysAndSymbols = getKeysAndSymbols(nameMap);\n  return mapProps((props) => ({\n    ...omit(props, ...keysAndSymbols),\n    ...mapKeys(\n      pick(props, ...keysAndSymbols),\n      (oldName) => nameMap[oldName],\n    ),\n  }));\n}\n\nexport default renameProps;\n"]},"metadata":{},"sourceType":"module"}