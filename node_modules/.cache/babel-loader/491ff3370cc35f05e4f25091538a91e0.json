{"ast":null,"code":"import { withHandlers, isolate, onWillReceiveProps, onDidUpdate, onWillUnmount } from \"reassemble\";\nexport var timeoutMultiplier = 3;\nexport var withTimeout = isolate(withHandlers(function () {\n  var timeoutID;\n  return {\n    timeoutIn: function (_a) {\n      var timeout = _a.timeout;\n      return function (ms) {\n        return timeoutID = setTimeout(timeout, ms);\n      };\n    },\n    cancel: function () {\n      return function () {\n        return clearTimeout(timeoutID);\n      };\n    }\n  };\n}), onWillReceiveProps(function (_a, _b) {\n  var inTransition = _a.transitionState.inTransition,\n      active = _a.active;\n  var nextInTransition = _b.transitionState.inTransition,\n      cancel = _b.cancel,\n      nextActive = _b.active;\n  var inTransitionChanged = inTransition !== nextInTransition;\n  var interrupted = nextInTransition && active !== nextActive;\n\n  if (inTransitionChanged || interrupted) {\n    cancel();\n  }\n}), onDidUpdate(function (_a, _b) {\n  var inTransition = _a.transitionState.inTransition,\n      active = _a.active;\n  var nextInTransition = _b.transitionState.inTransition,\n      totalDuration = _b.transitionInfo.totalDuration,\n      timeoutIn = _b.timeoutIn,\n      nextActive = _b.active;\n  var newTransition = !inTransition && nextInTransition;\n  var interrupted = nextInTransition && active !== nextActive;\n\n  if (newTransition || interrupted) {\n    if (nextInTransition) {\n      timeoutIn(totalDuration * timeoutMultiplier);\n    }\n  }\n}), onWillUnmount(function (_a) {\n  var cancel = _a.cancel;\n  return cancel();\n}));","map":{"version":3,"sources":["composables/withTimeout.ts"],"names":[],"mappings":"AAAA,SAAS,YAAT,EAAuB,OAAvB,EAAgC,kBAAhC,EAAoD,WAApD,EAAiE,aAAjE,QAAsF,YAAtF;AAMA,OAAO,IAAM,iBAAiB,GAAG,CAA1B;AAaP,OAAO,IAAM,WAAW,GACtB,OAAO,CACL,YAAY,CACV,YAAA;AACE,MAAI,SAAJ;AACA,SAAO;AACL,IAAA,SAAS,EAAE,UAAC,EAAD,EAAU;UAAR,OAAA,GAAA,EAAA,CAAA,O;AAAa,aAAA,UAAC,EAAD,EAAW;AAAK,eAAA,SAAS,GAAG,UAAU,CAAC,OAAD,EAAtB,EAAsB,CAAtB;AAAmC,OAAnD;AAAmD,KADxE;AAEL,IAAA,MAAM,EAAE,YAAA;AAAM,aAAA,YAAA;AAAM,eAAA,YAAY,CAAZ,SAAY,CAAZ;AAAN,OAAA;AAA6B;AAFtC,GAAP;AAID,CAPS,CADP,EASL,kBAAkB,CAChB,UACE,EADF,EAEE,EAFF,EAKG;MAJkB,YAAA,GAAA,EAAA,CAAA,eAAA,CAAA,Y;MAAe,MAAA,GAAA,EAAA,CAAA,M;MAEd,gBAAA,GAAA,EAAA,CAAA,eAAA,CAAA,Y;MAClB,MAAA,GAAA,EAAA,CAAA,M;MAAQ,UAAA,GAAA,EAAA,CAAA,M;AAGV,MAAM,mBAAmB,GAAG,YAAY,KAAK,gBAA7C;AACA,MAAM,WAAW,GAAG,gBAAgB,IAAI,MAAM,KAAK,UAAnD;;AACA,MAAI,mBAAmB,IAAI,WAA3B,EAAwC;AACtC,IAAA,MAAM;AACP;AACF,CAbe,CATb,EAuBL,WAAW,CACT,UACE,EADF,EAEE,EAFF,EAMG;MALkB,YAAA,GAAA,EAAA,CAAA,eAAA,CAAA,Y;MAAe,MAAA,GAAA,EAAA,CAAA,M;MAEd,gBAAA,GAAA,EAAA,CAAA,eAAA,CAAA,Y;MACD,aAAA,GAAA,EAAA,CAAA,cAAA,CAAA,a;MACjB,SAAA,GAAA,EAAA,CAAA,S;MAAW,UAAA,GAAA,EAAA,CAAA,M;AAGb,MAAM,aAAa,GAAG,CAAC,YAAD,IAAiB,gBAAvC;AACA,MAAM,WAAW,GAAG,gBAAgB,IAAI,MAAM,KAAK,UAAnD;;AACA,MAAI,aAAa,IAAI,WAArB,EAAkC;AAChC,QAAI,gBAAJ,EAAsB;AACpB,MAAA,SAAS,CAAC,aAAa,GAAG,iBAAjB,CAAT;AACD;AACF;AACF,CAhBQ,CAvBN,EAwCL,aAAa,CAAa,UAAC,EAAD,EAAW;MAAR,MAAA,GAAA,EAAA,CAAA,M;AAAa,SAAA,MAAM,EAAN;AAAQ,CAArC,CAxCR,CADF","sourcesContent":["import { withHandlers, isolate, onWillReceiveProps, onDidUpdate, onWillUnmount } from \"reassemble\";\n\nimport { CSSTransitionProps } from \"../csstransition\";\nimport { WithTransitionStateProps } from \"./withTransitionState\";\nimport { WithTransitionInfoProps } from \"./withTransitionInfo\";\n\nexport const timeoutMultiplier = 3;\n\ntype PropsOut = {\n  cancel: () => void,\n  timeoutIn: (ms: number) => void,\n};\n\ntype PropsUnion =\n  CSSTransitionProps\n  & WithTransitionStateProps\n  & WithTransitionInfoProps\n  & PropsOut;\n\nexport const withTimeout =\n  isolate(\n    withHandlers<PropsUnion, PropsOut>(\n      () => {\n        let timeoutID: any;\n        return {\n          timeoutIn: ({timeout}) => (ms: number) => timeoutID = setTimeout(timeout, ms),\n          cancel: () => () => clearTimeout(timeoutID),\n        };\n      }),\n    onWillReceiveProps<PropsUnion>(\n      (\n        {transitionState: {inTransition}, active},\n        {\n          transitionState: {inTransition: nextInTransition},\n          cancel, active: nextActive,\n        },\n      ) => {\n        const inTransitionChanged = inTransition !== nextInTransition;\n        const interrupted = nextInTransition && active !== nextActive;\n        if (inTransitionChanged || interrupted) {\n          cancel();\n        }\n      }),\n    onDidUpdate<PropsUnion>(\n      (\n        {transitionState: {inTransition}, active},\n        {\n          transitionState: {inTransition: nextInTransition},\n          transitionInfo: {totalDuration},\n          timeoutIn, active: nextActive,\n        },\n      ) => {\n        const newTransition = !inTransition && nextInTransition;\n        const interrupted = nextInTransition && active !== nextActive;\n        if (newTransition || interrupted) {\n          if (nextInTransition) {\n            timeoutIn(totalDuration * timeoutMultiplier);\n          }\n        }\n      }),\n    onWillUnmount<PropsUnion>(({ cancel }) => cancel()),\n  );\n"]},"metadata":{},"sourceType":"module"}