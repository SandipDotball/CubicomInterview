{"ast":null,"code":"import { withProps, withHandlers, isolate, integrate } from \"reassemble\";\nimport { parseTransition } from \"../utils/parseTransition\";\nimport { parseComputedTransition } from \"../utils/parseComputedTransition\";\nimport { memoize } from \"../utils/memoize\";\nexport var withTransitionInfo = isolate(withHandlers(function () {\n  var memoized = memoize(function (node) {\n    return parseComputedTransition(getComputedStyle(node));\n  }, function (node) {\n    return node.className;\n  });\n  return {\n    parseComputedTransitionMemoized: function () {\n      return memoized;\n    }\n  };\n}), withProps(function (_a) {\n  var style = _a.style,\n      className = _a.className,\n      transitionState = _a.transitionState,\n      getDOMNode = _a.getDOMNode,\n      parseComputedTransitionMemoized = _a.parseComputedTransitionMemoized;\n\n  if (transitionState.inTransition) {\n    var parsed = void 0;\n\n    if (style && style.transition) {\n      parsed = parseTransition(style.transition);\n    } else {\n      var node = getDOMNode();\n      node.className = className;\n      parsed = parseComputedTransitionMemoized(node);\n    }\n\n    var first = parsed[0],\n        last = parsed[1];\n    return {\n      transitionInfo: {\n        firstPropertyDelay: first.delay,\n        firstProperty: first.property,\n        lastProperty: last.property,\n        totalDuration: last.duration + last.delay\n      }\n    };\n  }\n\n  return {\n    transitionInfo: {}\n  };\n}), integrate(\"transitionInfo\"));","map":{"version":3,"sources":["composables/withTransitionInfo.ts"],"names":[],"mappings":"AAAA,SAAS,SAAT,EAAoB,YAApB,EAAkC,OAAlC,EAA2C,SAA3C,QAA4D,YAA5D;AAKA,SAAS,eAAT,QAAiD,0BAAjD;AACA,SAAS,uBAAT,QAAwC,kCAAxC;AACA,SAAS,OAAT,QAAwB,kBAAxB;AAoBA,OAAO,IAAM,kBAAkB,GAC7B,OAAO,CACL,YAAY,CACV,YAAA;AACE,MAAM,QAAQ,GAAG,OAAO,CACtB,UAAC,IAAD,EAAc;AAAK,WAAA,uBAAuB,CAAC,gBAAgB,CAAxC,IAAwC,CAAjB,CAAvB;AAA+C,GAD5C,EAEtB,UAAC,IAAD,EAAc;AAAK,WAAA,IAAI,CAAJ,SAAA;AAAc,GAFX,CAAxB;AAIA,SAAO;AACL,IAAA,+BAA+B,EAAE,YAAA;AAAM,aAAA,QAAA;AAAQ;AAD1C,GAAP;AAGD,CATS,CADP,EAWL,SAAS,CACP,UAAC,EAAD,EAAiF;MAA/E,KAAA,GAAA,EAAA,CAAA,K;MAAO,SAAA,GAAA,EAAA,CAAA,S;MAAW,eAAA,GAAA,EAAA,CAAA,e;MAAiB,UAAA,GAAA,EAAA,CAAA,U;MAAY,+BAAA,GAAA,EAAA,CAAA,+B;;AAC/C,MAAI,eAAe,CAAC,YAApB,EAAkC;AAChC,QAAI,MAAM,GAAA,KAAA,CAAV;;AACA,QAAI,KAAK,IAAI,KAAK,CAAC,UAAnB,EAA+B;AAC7B,MAAA,MAAM,GAAG,eAAe,CAAC,KAAK,CAAC,UAAP,CAAxB;AACD,KAFD,MAEO;AACL,UAAM,IAAI,GAAG,UAAU,EAAvB;AACA,MAAA,IAAI,CAAC,SAAL,GAAiB,SAAjB;AACA,MAAA,MAAM,GAAG,+BAA+B,CAAC,IAAD,CAAxC;AACD;;AACM,QAAA,KAAA,GAAA,MAAA,CAAA,CAAA,CAAA;AAAA,QAAO,IAAA,GAAA,MAAA,CAAA,CAAA,CAAP;AACP,WAAO;AACL,MAAA,cAAc,EAAE;AACd,QAAA,kBAAkB,EAAE,KAAK,CAAC,KADZ;AAEd,QAAA,aAAa,EAAE,KAAK,CAAC,QAFP;AAGd,QAAA,YAAY,EAAE,IAAI,CAAC,QAHL;AAId,QAAA,aAAa,EAAE,IAAI,CAAC,QAAL,GAAgB,IAAI,CAAC;AAJtB;AADX,KAAP;AAQD;;AACD,SAAO;AAAE,IAAA,cAAc,EAAE;AAAlB,GAAP;AACD,CAtBM,CAXJ,EAkCL,SAAS,CACP,gBADO,CAlCJ,CADF","sourcesContent":["import { withProps, withHandlers, isolate, integrate } from \"reassemble\";\n\nimport { CSSTransitionProps } from \"../csstransition\";\nimport { WithDOMNodeCallbackProps } from \"./withDOMNodeCallback\";\nimport { WithTransitionStateProps } from \"./withTransitionState\";\nimport { parseTransition, TransitionEntry } from \"../utils/parseTransition\";\nimport { parseComputedTransition } from \"../utils/parseComputedTransition\";\nimport { memoize } from \"../utils/memoize\";\n\nexport type WithTransitionInfoProps = {\n  transitionInfo?: {\n    firstPropertyDelay: number,\n    firstProperty: string,\n    lastProperty: string,\n    totalDuration: number,\n  },\n};\n\ntype PropsOut = WithTransitionInfoProps & {\n  parseComputedTransitionMemoized?: typeof parseComputedTransition,\n};\n\ntype PropsUnion = CSSTransitionProps\n  & WithDOMNodeCallbackProps\n  & WithTransitionStateProps\n  & PropsOut;\n\nexport const withTransitionInfo =\n  isolate(\n    withHandlers<PropsUnion, PropsOut>(\n      () => {\n        const memoized = memoize(\n          (node: Element) => parseComputedTransition(getComputedStyle(node)),\n          (node: Element) => node.className,\n        );\n        return {\n          parseComputedTransitionMemoized: () => memoized,\n        };\n      }),\n    withProps<PropsUnion, PropsOut>(\n      ({style, className, transitionState, getDOMNode, parseComputedTransitionMemoized}) => {\n        if (transitionState.inTransition) {\n          let parsed: [TransitionEntry, TransitionEntry];\n          if (style && style.transition) {\n            parsed = parseTransition(style.transition);\n          } else {\n            const node = getDOMNode();\n            node.className = className;\n            parsed = parseComputedTransitionMemoized(node);\n          }\n          const [first, last] = parsed;\n          return {\n            transitionInfo: {\n              firstPropertyDelay: first.delay,\n              firstProperty: first.property,\n              lastProperty: last.property,\n              totalDuration: last.duration + last.delay,\n            },\n          };\n        }\n        return { transitionInfo: {} };\n      }),\n    integrate<keyof WithTransitionInfoProps>(\n      \"transitionInfo\",\n    ),\n  );\n"]},"metadata":{},"sourceType":"module"}