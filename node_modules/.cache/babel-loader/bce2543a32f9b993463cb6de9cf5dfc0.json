{"ast":null,"code":"/* tslint:disable: variable-name no-switch-case-fall-through */\nvar __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n  }\n\n  return t;\n};\n\nimport { resolveTransit } from \"./transit\";\nexport var StateID;\n\n(function (StateID) {\n  StateID[StateID[\"EntryPoint\"] = 0] = \"EntryPoint\";\n  StateID[StateID[\"DefaultNew\"] = 1] = \"DefaultNew\";\n  StateID[StateID[\"ActiveNew\"] = 2] = \"ActiveNew\";\n  StateID[StateID[\"AppearNew\"] = 3] = \"AppearNew\";\n  StateID[StateID[\"Default\"] = 4] = \"Default\";\n  StateID[StateID[\"Active\"] = 5] = \"Active\";\n  StateID[StateID[\"AppearInit\"] = 6] = \"AppearInit\";\n  StateID[StateID[\"AppearPrepare\"] = 7] = \"AppearPrepare\";\n  StateID[StateID[\"AppearTriggered\"] = 8] = \"AppearTriggered\";\n  StateID[StateID[\"AppearStarted\"] = 9] = \"AppearStarted\";\n  StateID[StateID[\"EnterInit\"] = 10] = \"EnterInit\";\n  StateID[StateID[\"EnterPrepare\"] = 11] = \"EnterPrepare\";\n  StateID[StateID[\"EnterTriggered\"] = 12] = \"EnterTriggered\";\n  StateID[StateID[\"EnterStarted\"] = 13] = \"EnterStarted\";\n  StateID[StateID[\"LeaveInit\"] = 14] = \"LeaveInit\";\n  StateID[StateID[\"LeavePrepare\"] = 15] = \"LeavePrepare\";\n  StateID[StateID[\"LeaveTriggered\"] = 16] = \"LeaveTriggered\";\n  StateID[StateID[\"LeaveStarted\"] = 17] = \"LeaveStarted\";\n})(StateID || (StateID = {}));\n\nexport var StateIDList = [StateID.ActiveNew, StateID.DefaultNew, StateID.AppearNew, StateID.Active, StateID.Default, StateID.AppearInit, StateID.AppearTriggered, StateID.AppearStarted, StateID.EnterInit, StateID.EnterTriggered, StateID.EnterStarted, StateID.LeaveInit, StateID.LeaveTriggered, StateID.LeaveStarted, StateID.AppearPrepare, StateID.EnterPrepare, StateID.LeavePrepare];\nexport var ActionID;\n\n(function (ActionID) {\n  ActionID[ActionID[\"New\"] = 0] = \"New\";\n  ActionID[ActionID[\"Mount\"] = 1] = \"Mount\";\n  ActionID[ActionID[\"TransitionInit\"] = 2] = \"TransitionInit\";\n  ActionID[ActionID[\"TransitionPrepare\"] = 3] = \"TransitionPrepare\";\n  ActionID[ActionID[\"TransitionTrigger\"] = 4] = \"TransitionTrigger\";\n  ActionID[ActionID[\"TransitionStart\"] = 5] = \"TransitionStart\";\n  ActionID[ActionID[\"TransitionComplete\"] = 6] = \"TransitionComplete\";\n  ActionID[ActionID[\"Timeout\"] = 7] = \"Timeout\";\n})(ActionID || (ActionID = {}));\n\nexport var actionPropKeys = [\"active\", \"transitionAppear\", \"transitionDelay\", \"defaultStyle\", \"activeStyle\", \"appearStyle\", \"enterStyle\", \"leaveStyle\", \"appearInitStyle\", \"enterInitStyle\", \"leaveInitStyle\", \"defaultClassName\", \"activeClassName\", \"appearClassName\", \"enterClassName\", \"leaveClassName\", \"appearInitClassName\", \"enterInitClassName\", \"leaveInitClassName\"];\nexport var transitionNames = [\"enter\", \"leave\", \"appear\"];\nexport function hasTransition(name, props) {\n  var result = props[name + \"Style\"] !== undefined || props[name + \"ClassName\"] !== undefined;\n  return !result && name === \"appear\" ? hasTransition(\"enter\", props) : result;\n}\nexport function getDelay(name, delay) {\n  if (!delay) {\n    return 0;\n  }\n\n  if (typeof delay === \"number\") {\n    return delay;\n  }\n\n  return delay[name] ? delay[name] : 0;\n}\nexport function getState(id, name, props, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  if (name === \"appear\" && !props.appearStyle && !props.appearClassName) {\n    return getState(id, \"enter\", props, params);\n  }\n\n  var style;\n  var className;\n  var inTransition = false;\n\n  if (params.mode === \"init\" || params.mode === \"prepare\") {\n    style = props[name + \"InitStyle\"];\n    className = props[name + \"InitClassName\"];\n\n    if (style === undefined && className === undefined) {\n      if (name === \"enter\" || name === \"appear\") {\n        style = props.defaultStyle;\n        className = props.defaultClassName;\n      } else if (name === \"leave\") {\n        style = props.activeStyle;\n        className = props.activeClassName;\n      }\n    } // Setting transition before starting one fixes issues on IE & Edge...\n\n\n    if (params.mode === \"prepare\" && style !== undefined) {\n      var tmp = resolveTransit(props[name + \"Style\"], getDelay(name, props.transitionDelay));\n\n      if (tmp.transition) {\n        style = __assign({}, style, {\n          transition: tmp.transition\n        });\n      }\n    }\n  } else {\n    style = props[name + \"Style\"];\n    className = props[name + \"ClassName\"];\n\n    if ([\"enter\", \"appear\", \"leave\"].indexOf(name) >= 0) {\n      inTransition = true;\n      style = resolveTransit(style, getDelay(name, props.transitionDelay));\n    }\n  }\n\n  style = style || {};\n  className = className || \"\";\n  return {\n    id: id,\n    style: style,\n    className: className,\n    inTransition: inTransition\n  };\n}\nexport function stateFunc(id, name, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  return function (props) {\n    return getState(id, name, props, params);\n  };\n}\nexport var activeNewState = stateFunc(StateID.ActiveNew, \"active\");\nexport var defaultNewState = stateFunc(StateID.DefaultNew, \"default\");\nexport var appearNewState = stateFunc(StateID.AppearNew, \"appear\", {\n  mode: \"init\"\n});\nexport var activeState = stateFunc(StateID.Active, \"active\");\nexport var defaultState = stateFunc(StateID.Default, \"default\");\nexport var appearInitState = stateFunc(StateID.AppearInit, \"appear\", {\n  mode: \"init\"\n});\nexport var enterInitState = stateFunc(StateID.EnterInit, \"enter\", {\n  mode: \"init\"\n});\nexport var leaveInitState = stateFunc(StateID.LeaveInit, \"leave\", {\n  mode: \"init\"\n});\nexport var appearPrepareState = stateFunc(StateID.AppearPrepare, \"appear\", {\n  mode: \"prepare\"\n});\nexport var enterPrepareState = stateFunc(StateID.EnterPrepare, \"enter\", {\n  mode: \"prepare\"\n});\nexport var leavePrepareState = stateFunc(StateID.LeavePrepare, \"leave\", {\n  mode: \"prepare\"\n});\nexport var appearTriggeredState = stateFunc(StateID.AppearTriggered, \"appear\");\nexport var enterTriggeredState = stateFunc(StateID.EnterTriggered, \"enter\");\nexport var leaveTriggeredState = stateFunc(StateID.LeaveTriggered, \"leave\");\nexport var appearStartedState = stateFunc(StateID.AppearStarted, \"appear\");\nexport var enterStartedState = stateFunc(StateID.EnterStarted, \"enter\");\nexport var leaveStartedState = stateFunc(StateID.LeaveStarted, \"leave\");\n\nvar invalidTransitionError = function (stateID, actionID) {\n  return new Error(\"invalid state transition from \" + StateID[stateID] + \" with \" + ActionID[actionID]);\n};\n\nexport var reducer = function (stateID, action) {\n  var props = action.props;\n  var nextState;\n\n  switch (action.kind) {\n    case ActionID.New:\n      if (stateID !== StateID.EntryPoint) {\n        throw new Error(\"invalid entrypoint\");\n      }\n\n      if (props.active) {\n        if (props.transitionAppear) {\n          return {\n            state: appearNewState(props)\n          };\n        }\n\n        return {\n          state: activeNewState(props)\n        };\n      }\n\n      if (!props.transitionAppear && props.active) {\n        return {\n          state: activeNewState(props)\n        };\n      }\n\n      return {\n        state: defaultNewState(props)\n      };\n\n    case ActionID.Mount:\n      switch (stateID) {\n        case StateID.AppearNew:\n          return reducer(stateID, {\n            kind: ActionID.TransitionTrigger,\n            props: props\n          });\n\n        default:\n          return null;\n      }\n\n    case ActionID.TransitionInit:\n      switch (stateID) {\n        case StateID.DefaultNew:\n        case StateID.Default:\n          if (!hasTransition(\"enter\", props)) {\n            return {\n              state: activeState(props),\n              completed: true\n            };\n          }\n\n          nextState = enterInitState(props);\n          break;\n\n        case StateID.ActiveNew:\n        case StateID.Active:\n          if (!hasTransition(\"leave\", props)) {\n            return {\n              state: defaultState(props),\n              completed: true\n            };\n          }\n\n          nextState = leaveInitState(props);\n          break;\n\n        case StateID.AppearNew:\n          if (!hasTransition(\"appear\", props)) {\n            return {\n              state: activeState(props),\n              completed: true\n            };\n          }\n\n          nextState = appearInitState(props);\n          break;\n\n        default:\n          throw invalidTransitionError(stateID, action.kind);\n      }\n\n      ;\n      return {\n        state: nextState,\n        pending: ActionID.TransitionPrepare\n      };\n\n    case ActionID.TransitionPrepare:\n      switch (stateID) {\n        case StateID.EnterInit:\n          if (!props.active) {\n            return {\n              state: defaultState(props),\n              completed: true\n            };\n          }\n\n          nextState = enterPrepareState(props);\n          break;\n\n        case StateID.LeaveInit:\n          if (props.active) {\n            return {\n              state: activeState(props),\n              completed: true\n            };\n          }\n\n          nextState = leavePrepareState(props);\n          break;\n\n        case StateID.AppearInit:\n          if (!props.active) {\n            return {\n              state: defaultState(props),\n              completed: true\n            };\n          }\n\n          nextState = appearPrepareState(props);\n          break;\n\n        default:\n          throw invalidTransitionError(stateID, action.kind);\n      }\n\n      ;\n      return {\n        state: nextState,\n        pending: ActionID.TransitionTrigger\n      };\n\n    case ActionID.TransitionStart:\n      switch (stateID) {\n        case StateID.EnterTriggered:\n          return {\n            state: enterStartedState(props)\n          };\n\n        case StateID.LeaveTriggered:\n          return {\n            state: leaveStartedState(props)\n          };\n\n        case StateID.AppearTriggered:\n          return {\n            state: appearStartedState(props)\n          };\n\n        default:\n          // We don't error out, because the workaround for transitionstart\n          // could happen after transitionend.\n          return null;\n      }\n\n    case ActionID.TransitionComplete:\n      switch (stateID) {\n        case StateID.AppearTriggered:\n        case StateID.AppearStarted:\n        case StateID.EnterTriggered:\n        case StateID.EnterStarted:\n          return {\n            state: activeState(props),\n            completed: true\n          };\n\n        case StateID.LeaveTriggered:\n        case StateID.LeaveStarted:\n          return {\n            state: defaultState(props),\n            completed: true\n          };\n\n        default:\n          throw invalidTransitionError(stateID, action.kind);\n      }\n\n    case ActionID.TransitionTrigger:\n      switch (stateID) {\n        case StateID.ActiveNew:\n        case StateID.Active:\n        case StateID.DefaultNew:\n        case StateID.Default:\n        case StateID.AppearNew:\n          return reducer(stateID, {\n            kind: ActionID.TransitionInit,\n            props: props\n          });\n\n        case StateID.EnterInit:\n          return {\n            state: defaultState(props),\n            completed: true\n          };\n\n        case StateID.LeaveInit:\n          return {\n            state: activeState(props),\n            completed: true\n          };\n\n        case StateID.AppearInit:\n          return {\n            state: defaultState(props),\n            completed: true\n          };\n\n        case StateID.EnterPrepare:\n          if (props.active) {\n            return {\n              state: enterTriggeredState(props)\n            };\n          }\n\n          return {\n            state: defaultState(props),\n            completed: true\n          };\n\n        case StateID.LeavePrepare:\n          if (!props.active) {\n            return {\n              state: leaveTriggeredState(props)\n            };\n          }\n\n          return {\n            state: activeState(props),\n            completed: true\n          };\n\n        case StateID.AppearPrepare:\n          if (props.active) {\n            return {\n              state: appearTriggeredState(props)\n            };\n          }\n\n          return {\n            state: defaultState(props),\n            completed: true\n          };\n\n        case StateID.EnterTriggered:\n          return {\n            state: defaultState(props),\n            completed: true\n          };\n\n        case StateID.LeaveTriggered:\n          return {\n            state: activeState(props),\n            completed: true\n          };\n\n        case StateID.AppearTriggered:\n          return {\n            state: defaultState(props),\n            completed: true\n          };\n\n        case StateID.AppearStarted:\n        case StateID.EnterStarted:\n          return {\n            state: leaveStartedState(props)\n          };\n\n        case StateID.LeaveStarted:\n          return {\n            state: enterStartedState(props)\n          };\n\n        default:\n          throw invalidTransitionError(stateID, action.kind);\n      }\n\n    case ActionID.Timeout:\n      switch (stateID) {\n        case StateID.AppearTriggered:\n        case StateID.AppearStarted:\n        case StateID.EnterTriggered:\n        case StateID.EnterStarted:\n          return {\n            state: activeState(props),\n            completed: true\n          };\n\n        case StateID.LeaveTriggered:\n        case StateID.LeaveStarted:\n          return {\n            state: defaultState(props),\n            completed: true\n          };\n\n        default:\n          throw invalidTransitionError(stateID, action.kind);\n      }\n\n    default:\n  }\n\n  throw new Error(\"unexpected error\");\n};","map":{"version":3,"sources":["reducer.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable: variable-name no-switch-case-fall-through */\n\nimport { CSSProperties } from \"react\";\n\nimport { CSSTransitionProps, CSSTransitionDelay } from \"./csstransition\";\nimport { resolveTransit } from \"./transit\";\n\nexport interface TransitionState {\n  id?: StateID;\n  style?: CSSProperties;\n  className?: string;\n  inTransition?: boolean;\n}\n\nexport enum StateID {\n  EntryPoint,\n  DefaultNew,\n  ActiveNew,\n  AppearNew,\n  Default,\n  Active,\n  AppearInit,\n  AppearPrepare,\n  AppearTriggered,\n  AppearStarted,\n  EnterInit,\n  EnterPrepare,\n  EnterTriggered,\n  EnterStarted,\n  LeaveInit,\n  LeavePrepare,\n  LeaveTriggered,\n  LeaveStarted,\n}\n\nexport const StateIDList = [\n  StateID.ActiveNew, StateID.DefaultNew, StateID.AppearNew,\n  StateID.Active, StateID.Default,\n  StateID.AppearInit, StateID.AppearTriggered, StateID.AppearStarted,\n  StateID.EnterInit, StateID.EnterTriggered, StateID.EnterStarted,\n  StateID.LeaveInit, StateID.LeaveTriggered, StateID.LeaveStarted,\n  StateID.AppearPrepare, StateID.EnterPrepare, StateID.LeavePrepare,\n];\n\nexport enum ActionID {\n  New,\n  Mount,\n  TransitionInit,\n  TransitionPrepare,\n  TransitionTrigger,\n  TransitionStart,\n  TransitionComplete,\n  Timeout,\n}\n\nexport type ActionPropKeys =\n  \"active\"\n  | \"transitionAppear\"\n  | \"transitionDelay\"\n  | \"defaultStyle\"\n  | \"activeStyle\"\n  | \"appearStyle\"\n  | \"enterStyle\"\n  | \"leaveStyle\"\n  | \"appearInitStyle\"\n  | \"enterInitStyle\"\n  | \"leaveInitStyle\"\n  | \"defaultClassName\"\n  | \"activeClassName\"\n  | \"appearClassName\"\n  | \"enterClassName\"\n  | \"leaveClassName\"\n  | \"appearInitClassName\"\n  | \"enterInitClassName\"\n  | \"leaveInitClassName\";\n\nexport const actionPropKeys: ActionPropKeys[] = [\n  \"active\",\n  \"transitionAppear\",\n  \"transitionDelay\",\n  \"defaultStyle\",\n  \"activeStyle\",\n  \"appearStyle\",\n  \"enterStyle\",\n  \"leaveStyle\",\n  \"appearInitStyle\",\n  \"enterInitStyle\",\n  \"leaveInitStyle\",\n  \"defaultClassName\",\n  \"activeClassName\",\n  \"appearClassName\",\n  \"enterClassName\",\n  \"leaveClassName\",\n  \"appearInitClassName\",\n  \"enterInitClassName\",\n  \"leaveInitClassName\",\n];\n\nexport type ActionProps = {[P in ActionPropKeys]?: CSSTransitionProps[P]};\n\nexport type Action = {\n  kind: ActionID;\n  props: ActionProps;\n};\n\nexport const transitionNames = [\"enter\", \"leave\", \"appear\"];\n\nexport function hasTransition(name: string, props: any): boolean {\n  const result = props[name + \"Style\"] !== undefined || props[name + \"ClassName\"] !== undefined;\n  return !result && name === \"appear\"\n    ? hasTransition(\"enter\", props)\n    : result;\n}\n\nexport function getDelay(name: string, delay: CSSTransitionDelay): number {\n  if (!delay) { return 0; }\n  if (typeof delay === \"number\") {\n    return delay as number;\n  }\n  return (delay as any)[name] ? (delay as any)[name] : 0;\n}\n\nexport type GetStateParams = { mode?: \"init\" | \"prepare\" };\n\nexport function getState(id: StateID, name: string, props: any, params: GetStateParams = {}): TransitionState {\n  if (name === \"appear\" && !props.appearStyle && !props.appearClassName) {\n    return getState(id, \"enter\", props, params);\n  }\n  let style: any;\n  let className: string;\n  let inTransition = false;\n  if (params.mode === \"init\" || params.mode === \"prepare\") {\n    style = props[name + \"InitStyle\"];\n    className = props[name + \"InitClassName\"];\n    if (style === undefined && className === undefined) {\n      if (name === \"enter\" || name === \"appear\") {\n        style = props.defaultStyle;\n        className = props.defaultClassName;\n      } else if (name === \"leave\") {\n        style = props.activeStyle;\n        className = props.activeClassName;\n      }\n    }\n    // Setting transition before starting one fixes issues on IE & Edge...\n    if (params.mode === \"prepare\" && style !== undefined) {\n      const tmp = resolveTransit(props[name + \"Style\"], getDelay(name, props.transitionDelay));\n      if (tmp.transition) {\n        style = { ...style, transition: tmp.transition };\n      }\n    }\n  } else {\n    style = props[name + \"Style\"];\n    className = props[name + \"ClassName\"];\n    if ([\"enter\", \"appear\", \"leave\"].indexOf(name) >= 0) {\n      inTransition = true;\n      style = resolveTransit(style, getDelay(name, props.transitionDelay));\n    }\n  }\n\n  style = style || {};\n  className = className || \"\";\n\n  return {\n    id,\n    style,\n    className,\n    inTransition,\n  };\n}\n\nexport function stateFunc(id: StateID, name: string, params: GetStateParams = {}) {\n  return (props: Action[\"props\"]) => getState(id, name, props, params);\n}\n\nexport const activeNewState = stateFunc(StateID.ActiveNew, \"active\");\nexport const defaultNewState = stateFunc(StateID.DefaultNew, \"default\");\nexport const appearNewState = stateFunc(StateID.AppearNew, \"appear\", { mode: \"init\" });\nexport const activeState = stateFunc(StateID.Active, \"active\");\nexport const defaultState = stateFunc(StateID.Default, \"default\");\nexport const appearInitState = stateFunc(StateID.AppearInit, \"appear\", { mode: \"init\" });\nexport const enterInitState = stateFunc(StateID.EnterInit, \"enter\", { mode: \"init\" });\nexport const leaveInitState = stateFunc(StateID.LeaveInit, \"leave\", { mode: \"init\" });\nexport const appearPrepareState = stateFunc(StateID.AppearPrepare, \"appear\", { mode: \"prepare\" });\nexport const enterPrepareState = stateFunc(StateID.EnterPrepare, \"enter\", { mode: \"prepare\" });\nexport const leavePrepareState = stateFunc(StateID.LeavePrepare, \"leave\", { mode: \"prepare\" });\nexport const appearTriggeredState = stateFunc(StateID.AppearTriggered, \"appear\");\nexport const enterTriggeredState = stateFunc(StateID.EnterTriggered, \"enter\");\nexport const leaveTriggeredState = stateFunc(StateID.LeaveTriggered, \"leave\");\nexport const appearStartedState = stateFunc(StateID.AppearStarted, \"appear\");\nexport const enterStartedState = stateFunc(StateID.EnterStarted, \"enter\");\nexport const leaveStartedState = stateFunc(StateID.LeaveStarted, \"leave\");\n\nconst invalidTransitionError = (stateID: StateID, actionID: ActionID) => {\n  return new Error(`invalid state transition from ${StateID[stateID]} with ${ActionID[actionID]}`);\n};\n\nexport type Reducer = (stateID: StateID, action: Action) =>\n  { state: TransitionState, pending?: ActionID, completed?: boolean };\n\nexport const reducer: Reducer = (stateID, action) => {\n  const props = action.props;\n  let nextState: TransitionState;\n\n  switch (action.kind) {\n    case ActionID.New:\n      if (stateID !== StateID.EntryPoint) { throw new Error(\"invalid entrypoint\"); }\n      if (props.active) {\n        if (props.transitionAppear) { return { state: appearNewState(props) }; }\n        return { state: activeNewState(props) };\n      }\n      if (!props.transitionAppear && props.active) { return { state: activeNewState(props) }; }\n      return { state: defaultNewState(props) };\n    case ActionID.Mount:\n      switch (stateID) {\n        case StateID.AppearNew:\n          return reducer(stateID, { kind: ActionID.TransitionTrigger, props });\n        default:\n          return null;\n      }\n    case ActionID.TransitionInit:\n      switch (stateID) {\n        case StateID.DefaultNew:\n        case StateID.Default:\n          if (!hasTransition(\"enter\", props)) {\n            return { state: activeState(props), completed: true };\n          }\n          nextState = enterInitState(props);\n          break;\n        case StateID.ActiveNew:\n        case StateID.Active:\n          if (!hasTransition(\"leave\", props)) {\n            return { state: defaultState(props), completed: true };\n          }\n          nextState = leaveInitState(props);\n          break;\n        case StateID.AppearNew:\n          if (!hasTransition(\"appear\", props)) {\n            return { state: activeState(props), completed: true };\n          }\n          nextState = appearInitState(props);\n          break;\n        default:\n          throw invalidTransitionError(stateID, action.kind);\n      };\n      return { state: nextState, pending: ActionID.TransitionPrepare };\n    case ActionID.TransitionPrepare:\n      switch (stateID) {\n        case StateID.EnterInit:\n          if (!props.active) { return { state: defaultState(props), completed: true }; }\n          nextState = enterPrepareState(props);\n          break;\n        case StateID.LeaveInit:\n          if (props.active) { return { state: activeState(props), completed: true }; }\n          nextState = leavePrepareState(props);\n          break;\n        case StateID.AppearInit:\n          if (!props.active) { return { state: defaultState(props), completed: true }; }\n          nextState = appearPrepareState(props);\n          break;\n        default:\n          throw invalidTransitionError(stateID, action.kind);\n      };\n      return { state: nextState, pending: ActionID.TransitionTrigger };\n    case ActionID.TransitionStart:\n      switch (stateID) {\n        case StateID.EnterTriggered:\n          return { state: enterStartedState(props) };\n        case StateID.LeaveTriggered:\n          return { state: leaveStartedState(props) };\n        case StateID.AppearTriggered:\n          return { state: appearStartedState(props) };\n        default:\n          // We don't error out, because the workaround for transitionstart\n          // could happen after transitionend.\n          return null;\n      }\n    case ActionID.TransitionComplete:\n      switch (stateID) {\n        case StateID.AppearTriggered:\n        case StateID.AppearStarted:\n        case StateID.EnterTriggered:\n        case StateID.EnterStarted:\n          return { state: activeState(props), completed: true };\n        case StateID.LeaveTriggered:\n        case StateID.LeaveStarted:\n          return { state: defaultState(props), completed: true };\n        default:\n          throw invalidTransitionError(stateID, action.kind);\n      }\n    case ActionID.TransitionTrigger:\n      switch (stateID) {\n        case StateID.ActiveNew:\n        case StateID.Active:\n        case StateID.DefaultNew:\n        case StateID.Default:\n        case StateID.AppearNew:\n          return reducer(stateID, { kind: ActionID.TransitionInit, props });\n        case StateID.EnterInit:\n          return { state: defaultState(props), completed: true };\n        case StateID.LeaveInit:\n          return { state: activeState(props), completed: true };\n        case StateID.AppearInit:\n          return { state: defaultState(props), completed: true };\n        case StateID.EnterPrepare:\n          if (props.active) { return { state: enterTriggeredState(props) }; }\n          return { state: defaultState(props), completed: true };\n        case StateID.LeavePrepare:\n          if (!props.active) { return { state: leaveTriggeredState(props) }; }\n          return { state: activeState(props), completed: true };\n        case StateID.AppearPrepare:\n          if (props.active) { return { state: appearTriggeredState(props) }; }\n          return { state: defaultState(props), completed: true };\n        case StateID.EnterTriggered:\n          return { state: defaultState(props), completed: true };\n        case StateID.LeaveTriggered:\n          return { state: activeState(props), completed: true };\n        case StateID.AppearTriggered:\n          return { state: defaultState(props), completed: true };\n        case StateID.AppearStarted:\n        case StateID.EnterStarted:\n          return { state: leaveStartedState(props) };\n        case StateID.LeaveStarted:\n          return { state: enterStartedState(props) };\n        default:\n          throw invalidTransitionError(stateID, action.kind);\n      }\n    case ActionID.Timeout:\n      switch (stateID) {\n        case StateID.AppearTriggered:\n        case StateID.AppearStarted:\n        case StateID.EnterTriggered:\n        case StateID.EnterStarted:\n          return { state: activeState(props), completed: true };\n        case StateID.LeaveTriggered:\n        case StateID.LeaveStarted:\n          return { state: defaultState(props), completed: true };\n        default:\n          throw invalidTransitionError(stateID, action.kind);\n      }\n    default:\n  }\n  throw new Error(\"unexpected error\");\n};\n"]},"metadata":{},"sourceType":"module"}