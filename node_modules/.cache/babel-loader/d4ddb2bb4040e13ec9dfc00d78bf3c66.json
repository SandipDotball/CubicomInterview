{"ast":null,"code":"export function resolveValue(valueOrCallback) {\n  var args = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    args[_i - 1] = arguments[_i];\n  }\n\n  return typeof valueOrCallback === \"function\" ? (_a = valueOrCallback).call.apply(_a, [null].concat(args)) : valueOrCallback;\n\n  var _a;\n}\nexport default resolveValue;","map":{"version":3,"sources":["utils/resolveValue.ts"],"names":[],"mappings":"AAAA,OAAM,SAAA,YAAA,CAA0B,eAA1B,EAAsE;AAAE,MAAA,IAAA,GAAA,EAAA;;OAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAc;AAAd,IAAA,IAAA,CAAA,EAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AAC5E,SAAO,OAAO,eAAP,KAA2B,UAA3B,GACH,CAAA,EAAA,GAAC,eAAD,EAA8B,IAA9B,CAAkC,KAAlC,CAAkC,EAAlC,EAAkC,CAAC,IAAD,EAAK,MAAL,CAAU,IAAV,CAAlC,CADG,GAEH,eAFJ;;;AAGD;AAED,eAAe,YAAf","sourcesContent":["export function resolveValue<T>(valueOrCallback: T | ((...args: any[]) => T), ...args: any[]): T {\n  return typeof valueOrCallback === \"function\"\n    ? (valueOrCallback as Function).call(null, ...args)\n    : valueOrCallback;\n}\n\nexport default resolveValue;\n"]},"metadata":{},"sourceType":"module"}