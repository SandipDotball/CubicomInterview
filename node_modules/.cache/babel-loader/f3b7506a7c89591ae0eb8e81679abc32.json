{"ast":null,"code":"import parseDuration from \"./parseDuration\";\nexport function parseComputedTransition(computed) {\n  var lastProperty = null;\n  var firstProperty = null;\n  var lastPropertyTotalDuration = -1;\n  var firstPropertyDelay = 99999999;\n  var properties = computed.transitionProperty.split(/\\s*,\\s*/);\n  var delays = computed.transitionDelay.split(/\\s*,\\s*/);\n  var durations = computed.transitionDuration.split(/\\s*,\\s*/);\n  properties.forEach(function (property, i) {\n    var duration = parseDuration(durations[i]);\n    var delay = parseDuration(delays[i]);\n    var totalDuration = duration + delay;\n\n    if (totalDuration > lastPropertyTotalDuration) {\n      lastPropertyTotalDuration = totalDuration;\n      lastProperty = {\n        property: property,\n        duration: duration,\n        delay: delay\n      };\n    }\n\n    if (delay < firstPropertyDelay) {\n      firstPropertyDelay = delay;\n      firstProperty = {\n        property: property,\n        duration: duration,\n        delay: delay\n      };\n    }\n  });\n  return [firstProperty, lastProperty];\n}\nexport default parseComputedTransition;","map":{"version":3,"sources":["utils/parseComputedTransition.ts"],"names":[],"mappings":"AAAA,OAAO,aAAP,MAA0B,iBAA1B;AAGA,OAAM,SAAA,uBAAA,CAAkC,QAAlC,EAA+C;AACnD,MAAI,YAAY,GAAoB,IAApC;AACA,MAAI,aAAa,GAAoB,IAArC;AACA,MAAI,yBAAyB,GAAG,CAAC,CAAjC;AACA,MAAI,kBAAkB,GAAG,QAAzB;AACA,MAAM,UAAU,GAAG,QAAQ,CAAC,kBAAT,CAA4B,KAA5B,CAAkC,SAAlC,CAAnB;AACA,MAAM,MAAM,GAAG,QAAQ,CAAC,eAAT,CAAyB,KAAzB,CAA+B,SAA/B,CAAf;AACA,MAAM,SAAS,GAAG,QAAQ,CAAC,kBAAT,CAA4B,KAA5B,CAAkC,SAAlC,CAAlB;AACA,EAAA,UAAU,CAAC,OAAX,CACE,UAAC,QAAD,EAAmB,CAAnB,EAA4B;AAC1B,QAAM,QAAQ,GAAG,aAAa,CAAC,SAAS,CAAC,CAAD,CAAV,CAA9B;AACA,QAAM,KAAK,GAAG,aAAa,CAAC,MAAM,CAAC,CAAD,CAAP,CAA3B;AACA,QAAM,aAAa,GAAG,QAAQ,GAAG,KAAjC;;AACA,QAAI,aAAa,GAAG,yBAApB,EAA+C;AAC7C,MAAA,yBAAyB,GAAG,aAA5B;AACA,MAAA,YAAY,GAAG;AAAE,QAAA,QAAQ,EAAA,QAAV;AAAY,QAAA,QAAQ,EAAA,QAApB;AAAsB,QAAA,KAAK,EAAA;AAA3B,OAAf;AACD;;AACD,QAAI,KAAK,GAAG,kBAAZ,EAAgC;AAC9B,MAAA,kBAAkB,GAAG,KAArB;AACA,MAAA,aAAa,GAAG;AAAE,QAAA,QAAQ,EAAA,QAAV;AAAY,QAAA,QAAQ,EAAA,QAApB;AAAsB,QAAA,KAAK,EAAA;AAA3B,OAAhB;AACD;AACF,GAbH;AAeA,SAAO,CAAC,aAAD,EAAgB,YAAhB,CAAP;AACD;AAED,eAAe,uBAAf","sourcesContent":["import parseDuration from \"./parseDuration\";\nimport { TransitionEntry } from \"./parseTransition\";\n\nexport function parseComputedTransition(computed: any): [TransitionEntry, TransitionEntry] {\n  let lastProperty: TransitionEntry = null;\n  let firstProperty: TransitionEntry = null;\n  let lastPropertyTotalDuration = -1;\n  let firstPropertyDelay = 99999999;\n  const properties = computed.transitionProperty.split(/\\s*,\\s*/);\n  const delays = computed.transitionDelay.split(/\\s*,\\s*/);\n  const durations = computed.transitionDuration.split(/\\s*,\\s*/);\n  properties.forEach(\n    (property: string, i: number) => {\n      const duration = parseDuration(durations[i]);\n      const delay = parseDuration(delays[i]);\n      const totalDuration = duration + delay;\n      if (totalDuration > lastPropertyTotalDuration) {\n        lastPropertyTotalDuration = totalDuration;\n        lastProperty = { property, duration, delay };\n      }\n      if (delay < firstPropertyDelay) {\n        firstPropertyDelay = delay;\n        firstProperty = { property, duration, delay };\n      }\n    },\n  );\n  return [firstProperty, lastProperty];\n}\n\nexport default parseComputedTransition;\n"]},"metadata":{},"sourceType":"module"}